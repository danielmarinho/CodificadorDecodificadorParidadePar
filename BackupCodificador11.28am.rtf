{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 /*\
 * To change this license header, choose License Headers in Project Properties.\
 * To change this template file, choose Tools | Templates\
 * and open the template in the editor.\
 */\
package coddecparidadepar;\
\
import java.io.File;\
import java.io.FileInputStream;\
import java.io.FileNotFoundException;\
import java.io.FileOutputStream;\
import java.io.IOException;\
import java.util.BitSet;\
\
/**\
 *\
 * @author danielmarinho\
 */\
public class Codificador \{\
\
    public static boolean[] bytesToBooleans(byte bytes) \{\
        boolean[] bools = new boolean[8];\
        bools[0] = (bytes & 0x80) != 0;\
        bools[1] = (bytes & 0x40) != 0;\
        bools[2] = (bytes & 0x20) != 0;\
        bools[3] = (bytes & 0x10) != 0;\
        bools[4] = (bytes & 0x8) != 0;\
        bools[5] = (bytes & 0x4) != 0;\
        bools[6] = (bytes & 0x2) != 0;\
        bools[7] = (bytes & 0x1) != 0;\
        return bools;\
    \}\
\
    public static byte[] toByteArray(boolean[] bools) \{\
        BitSet bits = new BitSet(bools.length);\
        for (int i = 0; i < bools.length; i++) \{\
            if (bools[i]) \{\
                bits.set(i);\
            \}\
        \}\
        return bits.toByteArray();\
    \}\
\
    public static void main(String[] args) throws FileNotFoundException, IOException \{\
        String nomeArq = "Untitled.png";\
        File arquivo = new File(nomeArq);\
        File saida = new File("saida." + nomeArq.split("\\\\.")[nomeArq.split("\\\\.").length - 1]);\
        FileInputStream fis = new FileInputStream(arquivo);\
        FileOutputStream fos = new FileOutputStream(saida);\
\
        byte[] aux = new byte[8];\
        byte[] aux2 = new byte[8];\
        int bytesRead = fis.read(aux, 0, 8); //ser\'e3o necessarios 2 bytes para o calculo\
\
        BitSet  matrizBits = new BitSet(64);\
        BitSet verificadorVerticalBits = new BitSet(8);\
        BitSet verificadorHorizontalBits = new BitSet(8);\
        \
        boolean[][] matriz = new boolean[8][8];\
        boolean[] verificadorVertical = new boolean[8];\
        boolean[] verificadorHorizontal = new boolean[8];\
        BitSet bs = new BitSet(8);\
        \
        \
        while (bytesRead != -1) \{\
//            for (int i = 0; i < 8; i++) \{\
//                matriz[i] = bytesToBooleans(aux[i]);\
//            \}\
            matrizBits = BitSet.valueOf(aux);\
//            aux2 = new byte[8];\
//            for (int i = 0; i < 8; i++) \{\
//                for (int j = 0; j < 8; j++) \{\
//                    bs.set(j, matriz[i][j]);\
//                \}\
//                if (bs.toByteArray().length > 0) \{\
//                    aux2[i] = bs.toByteArray()[0];\
//                \}\
//            \}\
            aux2 = matrizBits.toByteArray();\
            fos.write(aux2);\
            bytesRead = fis.read(aux, 0, 8);\
        \}\
//        if (bytesRead < 8 && bytesRead != -1 && bytesRead != 0) \{\
//            System.out.println("debugger1");\
////            for (int i = 0; i < bytesRead; i++) \{\
////                matriz[i] = bytesToBooleans(aux[i]);\
////            \}\
//            matrizBits = BitSet.valueOf(aux);\
////            for (int i = 0; i < (8 - bytesRead)*8; i++) \{\
//////                boolean[] b = \{false, false, false, false, false, false, false, false\};\
//////                matriz[i] = b;\
////                matrizBits.set(i,false);\
////            \}\
////            aux2 = new byte[bytesRead];\
////            for (int i = 0; i < bytesRead; i++) \{\
////                for (int j = 0; j < 8; j++) \{\
////                    bs.set(j, matriz[i][j]);\
////                \}\
////                if (bs.toByteArray().length > 0) \{\
////                    aux2[i] = bs.toByteArray()[0];\
////                \}\
////            \}\
//            aux2 = matrizBits.toByteArray();\
//            fos.write(aux2);\
//        \}\
\
        fos.close();\
        fis.close();\
    \}\
\}\
}